#! /usr/bin/env python3
# Copyright (C) 2023  Coombszy
################################################################################
# `pre-commit` hook
# This hook is run before every commit.
#
# It runs all scripts under the`pre-commit` key in `config.json`. Which scripts
# are run is determined by the classifiers.
################################################################################
import os
import sys
import subprocess
import time
from lib.config import Config

hook_name = "pre-commit"
scripts = Config().get_config()[hook_name]

################################################################################
# Classifiers
# Used to work out if and when a script should be run
# file_extensions: a global list of all file extensions in the git repo


# Call all Classifiers
def run_classifiers():
    if is_terraform_file():
        run_scripts("terraform")
    if is_python_file():
        run_scripts("python")
    if is_rust_file():
        run_scripts("rust")


# Terraform
def is_terraform_file():
    return list_contains_any([".tf", ".tfvars"], file_extensions)


# Python
def is_python_file():
    return list_contains_any([".py"], file_extensions)


# Rust
def is_rust_file():
    return list_contains_any([".rs"], file_extensions)


################################################################################


# Run all scripts of a given type
def run_scripts(script_type):
    # Check if any scripts are configured
    if script_type not in scripts:
        print(f"[{script_type}] No scripts configured!")
        return

    for script in scripts[script_type]:
        print(f"[{script_type}] {script} ", end="")
        script_path = os.path.join(hooks_repo_path, script_type, script)
        # Run script and capture stdout
        os.system(f"chmod +x {script_path}")
        result = subprocess.run(script_path, stdout=subprocess.PIPE, check=False)
        if result.returncode != 0:
            global exit_code
            exit_code = 1
            print("FAILED!")
            print(result.stdout.decode("utf-8"), end="")
        else:
            print("OK!")


# Get all file extensions in a directory and its subdirectories
def get_file_extensions(directory):
    file_extensions = []
    for _, _, files in os.walk(directory):
        for file in files:
            file_extension = os.path.splitext(file)[1]
            if file_extension not in file_extensions:
                file_extensions.append(file_extension)
    return file_extensions


# If any elements of a list are in another list
def list_contains_any(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False


################################################################################


# Get path of hooks repo
hooks_repo_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
working_repo_path = (
    subprocess.run(
        ["git", "rev-parse", "--show-toplevel"], stdout=subprocess.PIPE, check=False
    )
    .stdout.decode("utf-8")
    .strip()
)

# Global states
exit_code = 0
file_extensions = get_file_extensions(working_repo_path)

# Run all classifiers
run_classifiers()

if exit_code != 0:
    print("#" * 80)
    print(f"Commit aborted! {hook_name} hook failed. Please fix the errors above.")
else:
    print(f"{hook_name} hook passed. Committing...")

# Sleep for 0.2 seconds to allow the user to see the output
# before the commit is made
time.sleep(0.2)
sys.exit(exit_code)
