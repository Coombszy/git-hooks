#!/usr/bin/env python3
################################################################################
# `pre-commit` hook
# This hook is run before every commit.
#
# This file will call into git-hooks

HOOK_NAME = "pre-commit"

import subprocess
import sys
import os
from time import sleep

# NOTE(Liam): Replace this with a better way to access parent folder modules
current = os.path.dirname(os.path.realpath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)

import githooks


# Get working repo path
def get_working_repo_path():
    return (
        subprocess.run(
            ["git", "rev-parse", "--show-toplevel"], stdout=subprocess.PIPE, check=False
        )
        .stdout.decode("utf-8")
        .strip()
    )


if __name__ == "__main__":
    exit_code = githooks.precommit_hook()
    hook_paths = [".git/hooks", ".husky"]

    for hook in hook_paths:
        # If a local script is detected, run it if githooks was successfull
        hook_path = os.path.join(get_working_repo_path(), hook, HOOK_NAME)
        if os.path.exists(hook_path) and exit_code == 0:
            print(f"Local {HOOK_NAME} hook detected, running...")

            p = subprocess.Popen(
                hook_path, stdout=subprocess.PIPE, stderr=subprocess.STDOUT
            )

            while True:
                line = p.stdout.readline().strip().decode("utf-8")
                print(line)
                sleep(0.05) # Slow down the loop

                if line == "" and p.poll() != None:
                    break

            p_return_code = p.wait()

            if p_return_code != 0:
                exit_code = p_return_code

        elif os.path.exists(hook_path) and exit_code != 0:
            print(f"Local {HOOK_NAME} hook detected, skipping until above is resolved")

    if exit_code == 0:
        print("Hooks passed. Committing...")

    sys.exit(exit_code)
